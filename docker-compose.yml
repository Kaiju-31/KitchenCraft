# üç≥ KitchenCraft - Docker Compose Configuration
# Full-stack application with PostgreSQL, Spring Boot Backend, and React Frontend
#
# IMPORTANT: Ce fichier n√©cessite un fichier .env √† la racine du projet contenant:
# DB_PASSWORD=your_secure_password
# Ce mot de passe doit correspondre √† celui dans backend/.env

version: '3.8'

services:
  # üóÉÔ∏è PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: kitchencraft-db
    restart: unless-stopped
    env_file:
      - backend/.env
    environment:
      POSTGRES_DB: kitchencraft
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-scripts:/docker-entrypoint-initdb.d
    networks:
      - kitchencraft-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d kitchencraft"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ‚òï Spring Boot Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: kitchencraft-backend
    restart: unless-stopped
    env_file:
      - backend/.env
    ports:
      - "8080:8080"
    environment:
      # Docker-specific overrides
      DB_HOST: postgres
      DB_NAME: kitchencraft
      DB_URL: jdbc:postgresql://postgres:5432/kitchencraft
      
      # Spring configuration
      SPRING_PROFILES_ACTIVE: docker
      
      # JVM tuning
      JVM_OPTS: -Xmx512m -Xms256m
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - kitchencraft-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/recipes"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ‚öõÔ∏è React Frontend + Nginx
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: kitchencraft-frontend
    env_file:
      - frontend/.env.local
    environment:
      DOCKER_ENV: "true"
    restart: unless-stopped
    ports:
      - "80:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - kitchencraft-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

# üåê Networks
networks:
  kitchencraft-network:
    driver: bridge
    name: kitchencraft-network

# üíæ Volumes  
volumes:
  postgres_data:
    name: kitchencraft-postgres-data
